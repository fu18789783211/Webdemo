// js是一个动态类型语言，意味着有时不用声明数据类型，js在执行阶段就会根据需要自动把类型转化

// 数字转换成字符串：
    // 使用运算符 (+) 可以将数字转换成字符串，而（-）则不能将数字转换成字符串

// 字符串转换成数字（转 number类型）：
    // 其他类型转 number类型主要有 Number(), parseInt(),parseFloat() 三个强制类型转换
    // Number() 属于严格转换；
        // 当全部为数字或者全部解析为数字时才能转换，当出现 非字符或者空格 时，会转换 NaN；
        // 当遇到 空字符串，空数组，null，布尔值为false时，会转换成 0 ；
        // 当 布尔值为 true时 则会转换成 1；
        // 当遇到 undefined 是会转换成 NaN；  注：NaN 属于number类型
        // NaN和谁都不相等包括他自己，可以使用 isNaN()判断是否为非有效数字， 非有效数字（true），有效数字（false）
    // parseInt() ：非严格转换  
        // 语法:parseInt(String,radix)   radix的范围（2～36）不在范围内则返回NaN
        // 只能获取到整数部分，小数部分会被遗弃，调用parseInt时最好带上 进制（radix）参数；
        // 当开头为非数字时，转换成 NaN；
        parseInt('123',5); //38 => 1*5^2 + 2*5^1 + 3*5^0 = 25+10+3=38
    // parseFloat()：非严格转换 ；保留浮点数
    // 使用一元加法运算符： ( +'1.1' ) + ( +'1.1' )= 2.2 注：使用括号是为了看清楚，不是必要的

// 转字符串有两种方式
    // toString()    null类型和undefined类型没有这个方法
    // String()  在不知道值是 null 和 undefined 的情况下也可以使用转型函数String，这个函数可以将任何值转换成字符串


// boolean 类型转换：使用 Boolean() 函数;
  // 数字类型转换成boolean： 除了 0 和NaN ，都是true；
  // 字符串转换成boolean：除了空串，都是true；
  // null 和 undefined 转换成 false；
  // 对象会转换成 true；


// 显式转换一般  使用 Number(), String(), Boolean() 函数手动转换;


// 隐式类型转换： 当遇到运算符在运算时，且两边的数据类型不一样那就需要隐式转换
// 隐式转换规则
    // 1.转为number类型：+ - * / ++ --（算数运算符） > < >= <= == != === !==（比较运算符）；
    // 2.转为string类型：+ 不仅是算术运算符，还可以做为字符串连接符把数据转换成string类型；
          console.log( 1 + 'abc');//'1abc'   + 号两边有一方为字符串，则会运用String()转换成字符串
    // 3.转为boolean类型： !（逻辑非运算符）
    // 另外需要补充的一点常用的几种运算符各运算符优先级：
    // 算术运算符：+ - * / ++ --
    // 比较运算符： > < >= <= == != === !==
    // 逻辑运算符：&& || !
    // 赋值运算符：= += -= *= /=
    // 算术运算符 > 比较运算符 > 逻辑运算符 > 赋值运算符

